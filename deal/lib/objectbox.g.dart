// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/customer.dart';
import 'model/deal-product.dart';
import 'model/deal.dart';
import 'model/debt.dart';
import 'model/order-product.dart';
import 'model/order.dart';
import 'model/product-type.dart';
import 'model/product.dart';
import 'model/sanamento-debt.dart';
import 'model/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7421937283968660979),
      name: 'Customer',
      lastPropertyId: const IdUid(3, 2223673762415263919),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5516851774186259637),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4874419492983377252),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2223673762415263919),
            name: 'dataRegistrazione',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(6, 3930127914050189654),
            name: 'ordini',
            targetId: const IdUid(15, 2107980783106737387))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 2231494751016686689),
      name: 'User',
      lastPropertyId: const IdUid(2, 5764091119836067102),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2557293599821092921),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5764091119836067102),
            name: 'password',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 3061092638899927712),
      name: 'Deal',
      lastPropertyId: const IdUid(2, 1689413039428245774),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1962633093878563574),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1689413039428245774),
            name: 'dataDeal',
            type: 12,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(4, 2033807559193152544),
            name: 'prodottiDeals',
            targetId: const IdUid(7, 5561898552399968852))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 5561898552399968852),
      name: 'DealProduct',
      lastPropertyId: const IdUid(13, 4965904030031740868),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6270103936497765081),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1603959935676934635),
            name: 'quantitativoProdottoDeal',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7094392442017399750),
            name: 'disponibilitaPersonale',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7914961259978924824),
            name: 'disponibilitaMercato',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2662988831073741597),
            name: 'quantitativoProdottoDealIniziale',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2807357424692582564),
            name: 'disponibilitaMercatoIniziale',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5314686291263940951),
            name: 'disponibilitaPersonaleIniziale',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1578209811731703085),
            name: 'prezzoIngrosso',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6364696224791429306),
            name: 'prezzoDettaglio',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6978403066748263535),
            name: 'importoInvestito',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5651715228592633391),
            name: 'importoRientrato',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4287141949171608366),
            name: 'productId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 8060435054879000933),
            relationTarget: 'Product'),
        ModelProperty(
            id: const IdUid(13, 4965904030031740868),
            name: 'dealId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 4755729650070530509),
            relationTarget: 'Deal')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'productsOrder',
            srcEntity: 'OrderProduct',
            srcField: 'productDeals')
      ]),
  ModelEntity(
      id: const IdUid(8, 4465628612806599345),
      name: 'Debt',
      lastPropertyId: const IdUid(4, 169144383861786057),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2534119368682866148),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5085528762624293416),
            name: 'importoDebito',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3555378813472284802),
            name: 'isAttivo',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 169144383861786057),
            name: 'orderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 2282129787479565973),
            relationTarget: 'Orders')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 6393049226164773591),
            name: 'sanamenti',
            targetId: const IdUid(12, 6493750567869354648))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 1124073054392947700),
      name: 'OrderProduct',
      lastPropertyId: const IdUid(8, 7664626469273364576),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3392136919149767572),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 2970733072447537816),
            name: 'orderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 1552700487162599384),
            relationTarget: 'Orders'),
        ModelProperty(
            id: const IdUid(4, 7082428116494310386),
            name: 'quantitativoEffetivo',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4604783356261706028),
            name: 'quantitativoPrevisto',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8604375090009471001),
            name: 'prezzoAlDettaglio',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7664626469273364576),
            name: 'productDealsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 6515444724830741292),
            relationTarget: 'DealProduct')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 4556266859434969460),
      name: 'Product',
      lastPropertyId: const IdUid(3, 3111809821413450694),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8489948083344007359),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 17228389796426893),
            name: 'nomeProdotto',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3111809821413450694),
            name: 'productTypeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 7859735244942421208),
            relationTarget: 'ProductType')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 6423481890464417457),
      name: 'ProductType',
      lastPropertyId: const IdUid(2, 6410116553174520163),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4333733580959882999),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6410116553174520163),
            name: 'descrizione',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 6493750567869354648),
      name: 'SanamentoDebt',
      lastPropertyId: const IdUid(4, 5385269386489482799),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1189691865231792100),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6075047463116745232),
            name: 'importoSanamento',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7431614706668335382),
            name: 'dataSanamento',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5385269386489482799),
            name: 'debtId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 8063036792118887540),
            relationTarget: 'Debt')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 2107980783106737387),
      name: 'Orders',
      lastPropertyId: const IdUid(6, 593888358760863597),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5804748898647414377),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8984138755418855494),
            name: 'dataOrdine',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1723933015870432),
            name: 'totale',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1094560310426541483),
            name: 'totalePagato',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1385039407649399390),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 7163126801125111579),
            relationTarget: 'Customer'),
        ModelProperty(
            id: const IdUid(6, 593888358760863597),
            name: 'debitoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 7273772196165436871),
            relationTarget: 'Debt')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'prodottiOrdine',
            srcEntity: 'OrderProduct',
            srcField: 'order')
      ])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(15, 2107980783106737387),
      lastIndexId: const IdUid(17, 7273772196165436871),
      lastRelationId: const IdUid(6, 3930127914050189654),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        884030905509662122,
        257201642756106755,
        5245553160419466542,
        8586908177687289627,
        1576822813800708800
      ],
      retiredIndexUids: const [131524144732979452, 8298782280754652945],
      retiredPropertyUids: const [
        1975222495793962740,
        8043038160531673834,
        2687092531684021470,
        76413241076206140,
        5215157557861024433,
        8543192397797117595,
        2880646533337085370,
        8912586727357451538,
        7594814273562739068,
        3923481109024574258,
        7094020053717878564,
        7781155493796407157,
        5369197525130972151,
        5694305362969215916,
        7157159269532012433,
        145666572110055604,
        200188159605625170,
        7310607724477652279,
        6877219232680989871,
        6518132426318218851,
        6093154372538413757,
        8656927061465280274,
        8974923324652400266,
        7890976512064044782,
        1064653204468388923,
        1848710549829408340,
        8119967533118138616,
        6175130035943107421
      ],
      retiredRelationUids: const [8267292149522660579, 4357842856668421892],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Customer: EntityDefinition<Customer>(
        model: _entities[0],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) =>
            {RelInfo<Customer>.toMany(6, object.id): object.ordini},
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.dataRegistrazione?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dataRegistrazioneValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dataRegistrazioneParam = dataRegistrazioneValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dataRegistrazioneValue);
          final object = Customer(
              id: idParam,
              name: nameParam,
              dataRegistrazione: dataRegistrazioneParam);
          InternalToManyAccess.setRelInfo<Customer>(
              object.ordini, store, RelInfo<Customer>.toMany(6, object.id));
          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[1],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, passwordOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final passwordParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = User(id: idParam, password: passwordParam);

          return object;
        }),
    Deal: EntityDefinition<Deal>(
        model: _entities[2],
        toOneRelations: (Deal object) => [],
        toManyRelations: (Deal object) =>
            {RelInfo<Deal>.toMany(4, object.id): object.prodottiDeals},
        getId: (Deal object) => object.id,
        setId: (Deal object, int id) {
          object.id = id;
        },
        objectToFB: (Deal object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dataDeal.microsecondsSinceEpoch * 1000);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dataDealParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0) /
                      1000)
                  .round());
          final object = Deal(id: idParam, dataDeal: dataDealParam);
          InternalToManyAccess.setRelInfo<Deal>(
              object.prodottiDeals, store, RelInfo<Deal>.toMany(4, object.id));
          return object;
        }),
    DealProduct: EntityDefinition<DealProduct>(
        model: _entities[3],
        toOneRelations: (DealProduct object) => [object.product, object.deal],
        toManyRelations: (DealProduct object) => {
              RelInfo<OrderProduct>.toOneBacklink(8, object.id,
                      (OrderProduct srcObject) => srcObject.productDeals):
                  object.productsOrder
            },
        getId: (DealProduct object) => object.id,
        setId: (DealProduct object, int id) {
          object.id = id;
        },
        objectToFB: (DealProduct object, fb.Builder fbb) {
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.quantitativoProdottoDeal);
          fbb.addFloat64(2, object.disponibilitaPersonale);
          fbb.addFloat64(3, object.disponibilitaMercato);
          fbb.addFloat64(4, object.quantitativoProdottoDealIniziale);
          fbb.addFloat64(5, object.disponibilitaMercatoIniziale);
          fbb.addFloat64(6, object.disponibilitaPersonaleIniziale);
          fbb.addFloat64(7, object.prezzoIngrosso);
          fbb.addFloat64(8, object.prezzoDettaglio);
          fbb.addFloat64(9, object.importoInvestito);
          fbb.addFloat64(10, object.importoRientrato);
          fbb.addInt64(11, object.product.targetId);
          fbb.addInt64(12, object.deal.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final quantitativoProdottoDealParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final disponibilitaPersonaleParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final disponibilitaMercatoParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final quantitativoProdottoDealInizialeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final disponibilitaMercatoInizialeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final disponibilitaPersonaleInizialeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final prezzoIngrossoParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final prezzoDettaglioParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final importoInvestitoParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final importoRientratoParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final object = DealProduct(
              id: idParam,
              quantitativoProdottoDeal: quantitativoProdottoDealParam,
              disponibilitaPersonale: disponibilitaPersonaleParam,
              disponibilitaMercato: disponibilitaMercatoParam,
              quantitativoProdottoDealIniziale:
                  quantitativoProdottoDealInizialeParam,
              disponibilitaMercatoIniziale: disponibilitaMercatoInizialeParam,
              disponibilitaPersonaleIniziale:
                  disponibilitaPersonaleInizialeParam,
              prezzoIngrosso: prezzoIngrossoParam,
              prezzoDettaglio: prezzoDettaglioParam,
              importoInvestito: importoInvestitoParam,
              importoRientrato: importoRientratoParam);
          object.product.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.product.attach(store);
          object.deal.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.deal.attach(store);
          InternalToManyAccess.setRelInfo<DealProduct>(
              object.productsOrder,
              store,
              RelInfo<OrderProduct>.toOneBacklink(8, object.id,
                  (OrderProduct srcObject) => srcObject.productDeals));
          return object;
        }),
    Debt: EntityDefinition<Debt>(
        model: _entities[4],
        toOneRelations: (Debt object) => [object.order],
        toManyRelations: (Debt object) =>
            {RelInfo<Debt>.toMany(1, object.id): object.sanamenti},
        getId: (Debt object) => object.id,
        setId: (Debt object, int id) {
          object.id = id;
        },
        objectToFB: (Debt object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.importoDebito);
          fbb.addBool(2, object.isAttivo);
          fbb.addInt64(3, object.order.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final importoDebitoParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final isAttivoParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final object = Debt(
              id: idParam,
              importoDebito: importoDebitoParam,
              isAttivo: isAttivoParam);
          object.order.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.order.attach(store);
          InternalToManyAccess.setRelInfo<Debt>(
              object.sanamenti, store, RelInfo<Debt>.toMany(1, object.id));
          return object;
        }),
    OrderProduct: EntityDefinition<OrderProduct>(
        model: _entities[5],
        toOneRelations: (OrderProduct object) =>
            [object.order, object.productDeals],
        toManyRelations: (OrderProduct object) => {},
        getId: (OrderProduct object) => object.id,
        setId: (OrderProduct object, int id) {
          object.id = id;
        },
        objectToFB: (OrderProduct object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(2, object.order.targetId);
          fbb.addFloat64(3, object.quantitativoEffetivo);
          fbb.addFloat64(4, object.quantitativoPrevisto);
          fbb.addFloat64(5, object.prezzoAlDettaglio);
          fbb.addInt64(7, object.productDeals.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final quantitativoEffetivoParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final quantitativoPrevistoParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final prezzoAlDettaglioParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = OrderProduct(
              id: idParam,
              quantitativoEffetivo: quantitativoEffetivoParam,
              quantitativoPrevisto: quantitativoPrevistoParam,
              prezzoAlDettaglio: prezzoAlDettaglioParam);
          object.order.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.order.attach(store);
          object.productDeals.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.productDeals.attach(store);
          return object;
        }),
    Product: EntityDefinition<Product>(
        model: _entities[6],
        toOneRelations: (Product object) => [object.productType],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final nomeProdottoOffset = fbb.writeString(object.nomeProdotto);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeProdottoOffset);
          fbb.addInt64(2, object.productType.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nomeProdottoParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final object = Product(id: idParam, nomeProdotto: nomeProdottoParam);
          object.productType.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.productType.attach(store);
          return object;
        }),
    ProductType: EntityDefinition<ProductType>(
        model: _entities[7],
        toOneRelations: (ProductType object) => [],
        toManyRelations: (ProductType object) => {},
        getId: (ProductType object) => object.id,
        setId: (ProductType object, int id) {
          object.id = id;
        },
        objectToFB: (ProductType object, fb.Builder fbb) {
          final descrizioneOffset = fbb.writeString(object.descrizione);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descrizioneOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final descrizioneParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final object =
              ProductType(id: idParam, descrizione: descrizioneParam);

          return object;
        }),
    SanamentoDebt: EntityDefinition<SanamentoDebt>(
        model: _entities[8],
        toOneRelations: (SanamentoDebt object) => [object.debt],
        toManyRelations: (SanamentoDebt object) => {},
        getId: (SanamentoDebt object) => object.id,
        setId: (SanamentoDebt object, int id) {
          object.id = id;
        },
        objectToFB: (SanamentoDebt object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.importoSanamento);
          fbb.addInt64(2, object.dataSanamento?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.debt.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dataSanamentoValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final importoSanamentoParam =
              const fb.Float64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final dataSanamentoParam = dataSanamentoValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dataSanamentoValue);
          final object = SanamentoDebt(
              id: idParam,
              importoSanamento: importoSanamentoParam,
              dataSanamento: dataSanamentoParam);
          object.debt.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.debt.attach(store);
          return object;
        }),
    Orders: EntityDefinition<Orders>(
        model: _entities[9],
        toOneRelations: (Orders object) => [object.customer, object.debito],
        toManyRelations: (Orders object) => {
              RelInfo<OrderProduct>.toOneBacklink(3, object.id,
                      (OrderProduct srcObject) => srcObject.order):
                  object.prodottiOrdine
            },
        getId: (Orders object) => object.id,
        setId: (Orders object, int id) {
          object.id = id;
        },
        objectToFB: (Orders object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dataOrdine.millisecondsSinceEpoch);
          fbb.addFloat64(2, object.totale);
          fbb.addFloat64(3, object.totalePagato);
          fbb.addInt64(4, object.customer.targetId);
          fbb.addInt64(5, object.debito.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dataOrdineParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final totaleParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final totalePagatoParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = Orders(
              id: idParam,
              dataOrdine: dataOrdineParam,
              totale: totaleParam,
              totalePagato: totalePagatoParam);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.customer.attach(store);
          object.debito.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.debito.attach(store);
          InternalToManyAccess.setRelInfo<Orders>(
              object.prodottiOrdine,
              store,
              RelInfo<OrderProduct>.toOneBacklink(
                  3, object.id, (OrderProduct srcObject) => srcObject.order));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[0].properties[0]);

  /// see [Customer.name]
  static final name = QueryStringProperty<Customer>(_entities[0].properties[1]);

  /// see [Customer.dataRegistrazione]
  static final dataRegistrazione =
      QueryIntegerProperty<Customer>(_entities[0].properties[2]);

  /// see [Customer.ordini]
  static final ordini =
      QueryRelationToMany<Customer, Orders>(_entities[0].relations[0]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[1].properties[0]);

  /// see [User.password]
  static final password = QueryStringProperty<User>(_entities[1].properties[1]);
}

/// [Deal] entity fields to define ObjectBox queries.
class Deal_ {
  /// see [Deal.id]
  static final id = QueryIntegerProperty<Deal>(_entities[2].properties[0]);

  /// see [Deal.dataDeal]
  static final dataDeal =
      QueryIntegerProperty<Deal>(_entities[2].properties[1]);

  /// see [Deal.prodottiDeals]
  static final prodottiDeals =
      QueryRelationToMany<Deal, DealProduct>(_entities[2].relations[0]);
}

/// [DealProduct] entity fields to define ObjectBox queries.
class DealProduct_ {
  /// see [DealProduct.id]
  static final id =
      QueryIntegerProperty<DealProduct>(_entities[3].properties[0]);

  /// see [DealProduct.quantitativoProdottoDeal]
  static final quantitativoProdottoDeal =
      QueryDoubleProperty<DealProduct>(_entities[3].properties[1]);

  /// see [DealProduct.disponibilitaPersonale]
  static final disponibilitaPersonale =
      QueryDoubleProperty<DealProduct>(_entities[3].properties[2]);

  /// see [DealProduct.disponibilitaMercato]
  static final disponibilitaMercato =
      QueryDoubleProperty<DealProduct>(_entities[3].properties[3]);

  /// see [DealProduct.quantitativoProdottoDealIniziale]
  static final quantitativoProdottoDealIniziale =
      QueryDoubleProperty<DealProduct>(_entities[3].properties[4]);

  /// see [DealProduct.disponibilitaMercatoIniziale]
  static final disponibilitaMercatoIniziale =
      QueryDoubleProperty<DealProduct>(_entities[3].properties[5]);

  /// see [DealProduct.disponibilitaPersonaleIniziale]
  static final disponibilitaPersonaleIniziale =
      QueryDoubleProperty<DealProduct>(_entities[3].properties[6]);

  /// see [DealProduct.prezzoIngrosso]
  static final prezzoIngrosso =
      QueryDoubleProperty<DealProduct>(_entities[3].properties[7]);

  /// see [DealProduct.prezzoDettaglio]
  static final prezzoDettaglio =
      QueryDoubleProperty<DealProduct>(_entities[3].properties[8]);

  /// see [DealProduct.importoInvestito]
  static final importoInvestito =
      QueryDoubleProperty<DealProduct>(_entities[3].properties[9]);

  /// see [DealProduct.importoRientrato]
  static final importoRientrato =
      QueryDoubleProperty<DealProduct>(_entities[3].properties[10]);

  /// see [DealProduct.product]
  static final product =
      QueryRelationToOne<DealProduct, Product>(_entities[3].properties[11]);

  /// see [DealProduct.deal]
  static final deal =
      QueryRelationToOne<DealProduct, Deal>(_entities[3].properties[12]);
}

/// [Debt] entity fields to define ObjectBox queries.
class Debt_ {
  /// see [Debt.id]
  static final id = QueryIntegerProperty<Debt>(_entities[4].properties[0]);

  /// see [Debt.importoDebito]
  static final importoDebito =
      QueryDoubleProperty<Debt>(_entities[4].properties[1]);

  /// see [Debt.isAttivo]
  static final isAttivo =
      QueryBooleanProperty<Debt>(_entities[4].properties[2]);

  /// see [Debt.order]
  static final order =
      QueryRelationToOne<Debt, Orders>(_entities[4].properties[3]);

  /// see [Debt.sanamenti]
  static final sanamenti =
      QueryRelationToMany<Debt, SanamentoDebt>(_entities[4].relations[0]);
}

/// [OrderProduct] entity fields to define ObjectBox queries.
class OrderProduct_ {
  /// see [OrderProduct.id]
  static final id =
      QueryIntegerProperty<OrderProduct>(_entities[5].properties[0]);

  /// see [OrderProduct.order]
  static final order =
      QueryRelationToOne<OrderProduct, Orders>(_entities[5].properties[1]);

  /// see [OrderProduct.quantitativoEffetivo]
  static final quantitativoEffetivo =
      QueryDoubleProperty<OrderProduct>(_entities[5].properties[2]);

  /// see [OrderProduct.quantitativoPrevisto]
  static final quantitativoPrevisto =
      QueryDoubleProperty<OrderProduct>(_entities[5].properties[3]);

  /// see [OrderProduct.prezzoAlDettaglio]
  static final prezzoAlDettaglio =
      QueryDoubleProperty<OrderProduct>(_entities[5].properties[4]);

  /// see [OrderProduct.productDeals]
  static final productDeals =
      QueryRelationToOne<OrderProduct, DealProduct>(_entities[5].properties[5]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.id]
  static final id = QueryIntegerProperty<Product>(_entities[6].properties[0]);

  /// see [Product.nomeProdotto]
  static final nomeProdotto =
      QueryStringProperty<Product>(_entities[6].properties[1]);

  /// see [Product.productType]
  static final productType =
      QueryRelationToOne<Product, ProductType>(_entities[6].properties[2]);
}

/// [ProductType] entity fields to define ObjectBox queries.
class ProductType_ {
  /// see [ProductType.id]
  static final id =
      QueryIntegerProperty<ProductType>(_entities[7].properties[0]);

  /// see [ProductType.descrizione]
  static final descrizione =
      QueryStringProperty<ProductType>(_entities[7].properties[1]);
}

/// [SanamentoDebt] entity fields to define ObjectBox queries.
class SanamentoDebt_ {
  /// see [SanamentoDebt.id]
  static final id =
      QueryIntegerProperty<SanamentoDebt>(_entities[8].properties[0]);

  /// see [SanamentoDebt.importoSanamento]
  static final importoSanamento =
      QueryDoubleProperty<SanamentoDebt>(_entities[8].properties[1]);

  /// see [SanamentoDebt.dataSanamento]
  static final dataSanamento =
      QueryIntegerProperty<SanamentoDebt>(_entities[8].properties[2]);

  /// see [SanamentoDebt.debt]
  static final debt =
      QueryRelationToOne<SanamentoDebt, Debt>(_entities[8].properties[3]);
}

/// [Orders] entity fields to define ObjectBox queries.
class Orders_ {
  /// see [Orders.id]
  static final id = QueryIntegerProperty<Orders>(_entities[9].properties[0]);

  /// see [Orders.dataOrdine]
  static final dataOrdine =
      QueryIntegerProperty<Orders>(_entities[9].properties[1]);

  /// see [Orders.totale]
  static final totale = QueryDoubleProperty<Orders>(_entities[9].properties[2]);

  /// see [Orders.totalePagato]
  static final totalePagato =
      QueryDoubleProperty<Orders>(_entities[9].properties[3]);

  /// see [Orders.customer]
  static final customer =
      QueryRelationToOne<Orders, Customer>(_entities[9].properties[4]);

  /// see [Orders.debito]
  static final debito =
      QueryRelationToOne<Orders, Debt>(_entities[9].properties[5]);
}
